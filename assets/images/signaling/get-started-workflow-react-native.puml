@startuml

!include agora_skin.iuml

actor "User" as USR

box "Your app"
participant "<size:40><&layers>\n Signaling SDK" as APP
end box

box "Agora"
participant "<size:40><&cloud>\n Signaling" as API
end box

group Initialize
USR -> APP: Open app
APP -> APP: Create RTMClient instance: \n createAgoraRtmClient(RtmConfig)
APP -> APP: Wrap with RTMProvider
APP -> APP: Get engine instance: \n useRtm()
APP -> APP: Add event listeners: \n useRtmEvent(engine, 'message') \n useRtmEvent(engine, 'linkState')
end

group Login
APP -> API: engine.login({ token })
API -> APP: linkState event: \n RtmLinkState.connecting
API -> APP: linkState event: \n RtmLinkState.connected
APP -> APP: Auto-subscribe on connection: \n subscribeToChannel()
APP -> API: engine.subscribe(CHANNEL_ID, { withMessage: true })
end

group Messages
USR -> APP: Type and send message
APP -> API: engine.publish(CHANNEL_ID, message, {\n channelType: RtmChannelType.message,\n messageType: RtmMessageType.string })
APP -> APP: Add sent message to local state
API -> APP: message event from other users
APP -> APP: Handle message event: \n new MessageEvent(evt)
APP -> USR: Display received message
end

group Close
USR -> APP: Close app / component unmount
APP -> API: engine.unsubscribe(CHANNEL_ID)
APP -> API: engine.logout()
APP -> APP: Clean up: \n engine.release()
end

@enduml