@startuml ils-call-logic-flutter
!include agora_skin.iuml

actor "User" as USR

box "Your app"
participant "Video SDK" as APP
end box

box "Agora"
participant "SD-RTN" as API
end box

USR -> APP: Open App
APP -> APP: Initialize the Agora Video SDK engine: \n agoraEngine = createAgoraRtcEngine()
APP -> APP: Enable the video module:\n agoraEngine.enableVideo
APP -> APP: Register the event handler: \n agoraEngine.registerEventHandler
APP -> APP: Setup AgoraVideoView widget \n for local or remote video

group Host
USR -> APP: Start a live streaming event
APP -> API: Set the client role as Host: \n agoraEngine.setClientRole(role: ClientRoleType.clientRoleBroadcaster);
APP -> API: Set a channel profile: \n .setChannelProfile(ChannelProfileType.channelProfileLiveBroadcasting);
APP -> APP: Retrieve authentication token
APP -> API: Join a channel using the token:\n agoraEngine.joinChannel
APP -> API: Send data streams
APP <- API: Remote user joined: \n RtcEngineEventHandler onUserJoined:
APP -> APP: Start local peview: \n agoraEngine.startPreview()
APP -> APP: Display local video using AgoraVideoView
end

group Audience
USR -> APP: Join a live streaming event
APP -> API: Set the client role as Audience: \n agoraEngine.setClientRole(role: ClientRoleType.clientRoleAudience);
APP -> API: Set a channel profile: \n .setChannelProfile(ChannelProfileType.channelProfileLiveBroadcasting);
APP -> APP: Retrieve authentication token
APP -> API: Join a channel using the token:\n agoraEngine.joinChannel
APP <- API: Remote user joined: \n RtcEngineEventHandler onUserJoined:
APP <- API: Receive data streams
APP -> APP: Render remote video using AgoraVideoView
end

USR -> APP: Leave broadcast
APP -> API: agoraEngine.leaveChannel()

USR -> APP: Close app

@enduml
